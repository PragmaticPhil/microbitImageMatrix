Protocols and examples of server data that is sent to nodes:

The server will send 2 types of message (over radio) to a node.
Messages are sent in plain text and conform to the map below:

MAP (where serverMessage as a message string containing image data):
1   serverMessage[0:2]   = ServerID
2   serverMessage[2:3]   = messageType (instruction or image)
3   serverMessage[3:5]   = server instruction code.
4   serverMessage[5:9]   = parameter relating to server instruction (4 chars, can be 2 2-char params, eg Row / Col)
5   serverMessage[9:12]  = target (usually a nodeID, but not always - can be frame buffer ID too)
6   serverMessage[12:41] = image data

Note that (1) and (2) are mandatory for ALL messages, but only these 2 fields.

So, ALL messages have the same basic pattern:
   [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char][imageData, 29 char]
The length of the message depends on the MESSAGE TYPE and the SERVER INSTRUCTION CODE.

NB - a fundamental thing to note is that there are only 2 different types of radio message sent by the server:

      TYPE0:   Server instructions.  
      TYPE1:   Image data. 

----------------------------------------------------------------------------------------------------------------

TYPE0:   Server instructions.  
         Includes instructions that nodes use to configure operational values, such as their row / col, 
         or to influence the way the nodes display (e.g. Pause)

         FORMAT: [serverID, 3char][messageType, 2 char][InstructionParams, 4char][TargetID, 3char] 

         Note - signals are as long as they need to be - we omit fields from right if they are irrelevant:
            SO... pX062       = pX0620000000
            Nodes are coded so there is very little chance of trying to read extraneous chars, so they are not sent.

       e.g.    pX0_60_0305  (rem - we don't send underscores though)
               pX0 = message from server with an instruction (so will NOT have image data)
               60 = This message is telling all nodes to set their ROW and COL params 
               03 = There are 3 rows (this is a count so absolute)
               05 = There are 5 columns
               
      see end for full list.
      
                           ----------------------------------------------------
 
TYPE1:   Image data.  
          The core of this app is the server passing image data to the nodes.
         
         FORMAT: [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char][image data] - 

       e.g.   pX1_00_0009_023_90909:90909:90909:90909:90909  (pX100000902390909:90909:90909:90909:90909)
              pX1    = message from server with image data
              00     = instruction from server (save image to specific node)
              0009   = save the image in Frame 9 buffer (which will be buffer #10 of course)
              023    = node that needs to process this is nodeID = 23
              
      Note - an important use case of the matrix is to smoothly scroll images - this will be enabled for horizontal scrolling only at 1st
      To support this we will enable the server to send an image to a wholoe ROW of nodes at the same time...

Nodes will insert the image into their buffers in line with THEIR location in the matrix... which is set in (0) above.

       e.g.   pX_1_20_0001_02_!90909:90909:90909:90909:90909
              pX     = message from server
              1      = message contains image data 
              20     = all nodes in the relevant ROW should save this image to one of their buffers
              0001   = default / base Frame buffer - each node adjusts where they save image based on this and their location in the row.
              02     = We are talking to row1 (the second row).


LIST OF SERVER INSTRUCTIONS:
Server instructions are broadcast to either single nodes, rows, cols or the whole matrix.
We use integers to group ones that are similarly tagetted.  
... this allows us to extract the first int from the message and infer some useful info.
The values below are hardcoded into nodes:

ID    DESCRIPTION
0x    used for instructions aimed at SINGLE NODES:
      - the param that follows is the FRAME ID - rem, nodeID is passed in separately (and ignored in many cases)
00    Save the image to the buffer shown in the InstructionParams field (it will be safe to caste to int)

2x    used for instructions aimed at WHOLE ROWS:
20    Save the image to the buffer in the InstructionParams field OFFSET BY COL LOCATION
21    Scroll left (this row only)
22    Scroll right (this row only)
24    Save the image to the buffer in the InstructionParams field (NOT offset)

40    Applies to whole matrix - used to send image data to every node and inserted into the specified buffer
41    Applies to whole matrix - used to send image data to every node - buffer offset by nodeID

60+   used for instructions aimed at WHOLE MATRIX - all nodes:
60    Set your ROW / COL params
61    Set frame buffer size (must be < totalFrames)
62    Scroll left (ALL rows)
63    Scroll right (ALL rows)
64    Speed up frame rate by hardcoded incrememt* deprecated - had to free up space.  Do speed processing server side only.
65    Slow down frame rate by hardcoded increment* see above
66    Set frame speed to param passed in in serverMessage[5:9]
67    Animate to left (i.e. move through node buffers in increments of 1) - ALL rows
68    Animate to right (i.e. move through node buffers in increments of -1) - ALL rows

70    Brighten all pixels*
71    Brighten non-blank pixels*
72    Dim all pixels*
73    Dim all non-blank pixels*

80    Pause
81    Unpause
82    All synch at same frame (synch for animation)
83    All synch at offset frame (synch for scroll)
90    Self diagnose Frame buffer.  Nodes check their totalFrames against number of non-empty buffers & display a fail note.
99    Reset node

EXAMPLES OF ENABLED SERVER INSTRUCTIONS (and ones that are encoded in node - ones marked *  above are dreamware atm):
... Set dims                        = pX0600205    (pX0 60 02 05)       - dims are 2 rows by 5 cols.
... Set frame buffer size           = pX0610005    (pX0 60 0005)        - Nodes use 5 frames from their buffer
... Scroll left (specific row)      = pX0210001    (pX0 21 0001)        - row 1 (second row) will be set to scroll left
... Scroll right (specific row)     = pX0220001    (pX0 22 0002)        - row 2 (third row) will be set to scroll right
... Scroll Left (all rows)          = pX062
... Scroll Right (all rows)         = pX063
... Increase Speed                  = pX064                             - increases frame refresh delay by 10ms
... decrease Speed                  = pX065                             - decreases frame refresh delay by 10ms
... Set frame delay                 = pX0660150    (pX0 66 0150)        - set delay between frames to 150ms
... Animate to the left             = pX067                             - when animating through frames move to left
... Animate to the right            = pX068                             - when animating through frames move to right
... Pause                           = pX080
... unPause                         = pX081
... Set current frame               = pX082004                          - will set current frame to 4 - synchs animations
... Set current frame + offset      = pX083004                          - will set current frame to 4 + nodeID - synchs scrolls
... Tell node to check buffer size  = pX090
... Tell node to soft reset         = pX099
