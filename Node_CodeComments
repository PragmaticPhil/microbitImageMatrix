

To keep the node code slim (& pack max functionality) enough to fit on a micro:bit ALL comments and debug have been removed.
I do not like removing comments so instead I will copy code chunks from mbImageService_Node below and add the relevant comments
Code will change and I will not update below every time, but the meaning of the comments should be preserved:


-----------------------------------------------------------------------------------
1 - 'MAIN'

while True:
    sleep(10)
    #   Ensure duration is LESS than standard delay between radio sends in server (25)
    processServerMessage(getServerMessage())
    
    if not(pauseShowFrame):     
        showNextFrame()
        sleep(frameSpeed - 10)
        

-----------------------------------------------------------------------------------
2 - RECEIVING AND PRE-FILTERING THE RADIO MESSAGE:


def processServerMessage(rawMsg):
    if(len(rawMsg) < 5): return
    #   more often than not the poll will return the String 'None'.
    #   the shortest valid server message is 5 chars ;)
    #   hence this simple and early check allows us to eliminate radio clutter that is not worth analysing

    #   we now know the String has at least 5 chars, so its safe to check the first 2
    #   we check for the unique 2 char String that all server messages are prefixed with:
    if(not(rawMsg[0 : 2] == "pX")):     return

    #   so when we get here we KNOW that its a valid message from our server
    #   ... but is it RELEVANT to this server?
    
    if(rawMsg[2 : 3] == "0"):                   processServerInstruction(rawMsg)
    #   At present ALL Server Instructions ("0" = SI) apply to every node (in some dreamware this wont apply)
    #   So of course this means the message IS relevant to this node, and we send it off to get processed

    else:   #   Not a server instruction so by implication an image carrying message...        
        if(isRelevantImageMessage(rawMsg)):     processImageMessage(rawMsg)
        #   esp with image data we only want to process if we have to, so we check if the msg 
        #   is aimed at this node before we process it.


def isRelevantImageMessage(rawMsg):
#   At this stage we know the radio message has come from our server and includes image data BUT:
#   is the message aimed at this node?  Thats what we are checking for below...

#    try:
#   Note - I've hidden the error trapping here because I wanted errors to show up in debug.  
#   Will reinstate at some point, space permitting. 

    if(not(rawMsg[2 : 3] == "1")):                                      return False
    #   Rem - we have ALREADY filtered out server instructions - rawMsg here really should be an Image message. 
    
    #   Code below therefore applies to IMAGE carrying data signals from server:
    if((rawMsg[3 : 5] == "00") and (int(rawMsg[9 : 12]) == nodeID)):    return True      
    #   Returns true if message targets this node specifically ("00" means target is single node).

if((rawMsg[3 : 4] == "2") and (int(rawMsg[9 : 12]) == rowRef)):     return True      
    #   Returns true if message is aimed at the row this node occupies ("2" indicates target is a whole row)
    
    return False
#    except:



-----------------------------------------------------------------------------------
3 - PROCESSING SERVER INSTRUCTIONS:
    There are a few below, and some are not used... these may be removed to make space:
    ... 64 and 65, and the accompanying method (incrementFrameSpeed) could be dropped (unused)
    ... I will need to find space to support server synch... later though.

def processServerInstruction(rawMsg):
    global pauseShowFrame
    global scrollDirection
    
    instructionType = int(rawMsg[3 : 5])
    print("Server instruction = " + str(instructionType))
    if(instructionType == 60): setNodeRowAndCol(rawMsg[5 : 7], rawMsg[7 : 9])    
    if(instructionType == 62): scrollDirection = 1
    if(instructionType == 63): scrollDirection = -1
    if(instructionType == 64): incrementFrameSpeed(10)
    if(instructionType == 65): incrementFrameSpeed(-10)
    if(instructionType == 66): setFrameSpeed(int(rawMsg[5:9]))
    if(instructionType == 80): pauseShowFrame = True
    if(instructionType == 81): pauseShowFrame = False
    
    if((instructionType == 21) and (int(rawMsg[9 : 12]) == rowRef)):    scrollDirection = 1
    if((instructionType == 22) and (int(rawMsg[9 : 12]) == rowRef)):    scrollDirection = -1
    #   Above, 21 = whole row scroll left and 22 = whole row scroll right.
    #   we ensure also that message is aimed at the row THIS node occupies.
    #   Note - usually I would write setScrollDirection and setPause methods... I have opted here
    #   for space - it will actually take slightly more space (just method declaration).



#   Perhaps the most important server instruction is the config - the server tells each node what the dims
#   of the matriz are, and the node works out which row / col it sits in:
def setNodeRowAndCol(rowStr, colStr):
    global totalRows
    global totalCols
    global rowRef
    global colRef

    totalRows = int(rowStr)
    totalCols = int(colStr)
    colRef = int(nodeID % totalCols)
    rowRef = int((nodeID - colRef) / int(colStr))
    
    

-----------------------------------------------------------------------------------
4 - SHOWING IMAGES (EFFECTIVELY ANIMATING):
    Node are doing one of the following:
    Showing a static frame (Pause is ON)
    Cycling through their buffer (scroll direction = 0 and pause is OFF)
    Scrolling (scroll dir = 1 or -1 and pause is OFF)

    This method is ONLY called is pause is off, so we need to decide which animation style to use:

def showNextFrame():
    global currentFrame
    if(scrollDirection == 0):       
    #   here we are going to show the next image buffer that the node has:
        currentFrame = getAdjacentFrameIndex(1)
        #   basically returns the next frame from the node's buffer and shows it below:
        display.show(Image(imageDataStore[currentFrame]))    
    else:
        display.show(Image(makeNextScrollFrame()))   
        #   We are scrolling, so we need to make the next frame (can't just use the buffer):
        
        
        
