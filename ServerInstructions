Protocols and examples of server data that is sent to nodes:

The server will send 2 types of message (over radio) to a node.
Messages are sent in plain text (get over it!) and conform to the map below:

MAP (where serverMessage as a message string containing image data):
1   serverMessage[0:2]   = ServerID
2   serverMessage[2:3]   = messageType (instruction or image)
3   serverMessage[3:5]   = server instruction code.
4   serverMessage[5:9]   = parameter relating to server instruction (4 chars, can be 2 2-char params, eg Row / Col)
5   serverMessage[9:12]  = target (usually a nodeID, but not always - can be frame buffer ID too)
6   serverMessage[12:41] = image data

Note that (1) and (2) are mandatory for ALL messages, but only these 2 fields.

So, ALL messages have the same basic pattern:
   [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char][imageData, 29 char]
The length of the message depends on the MESSAGE TYPE and the SERVER INSTRUCTION CODE.

TYPE0:   Server instructions.  
         Includes instructions that nodes use to configure operational values, such as their row / col, or default interframe delay

         FORMAT: [serverID, 3char][messageType, 2 char][InstructionParams, 4char][TargetID, 3char] 

       e.g.    pX0_60_0305_999  (rem - we don't send underscores, so this is sent as pX0600104999
               pX0 = message from server with an instruction (so will NOT have image data)
               60 = This message is telling all nodes to set their ROW and COL params 
               03 = There are 3 rows (this is a count so absolute)
               05 = There are 5 columns
               
      I have wrestled with a dilemmma: 
      To follow the pattern above, for  many types of server instructions there are dummy params - in the examples about the 999 is irrelevant.
      Do I send dummy chars or not?
      I like the security of not worrying about variable length, but I hate wasting chars that are send over radio.
      Avoidance of waste trumps vague fears I can handle in the node code.
      SO... for now, I am going to send truncated server messages where possible, but be wary of this.
      
      Anyway, the way nodes are set up for current iteration, sending pX0600104999 and pX0600104 will have same effect
      Hence current server code sends only necessary data, and day is saved by nodes only reading necessary data per instruction

TYPE1:   Image data.  
          The core of this app is the server passing image data to the nodes.
         
         FORMAT: [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char][image data] - 

       e.g.   pX1_00_0009_023_90909:90909:90909:90909:90909  (pX100000902390909:90909:90909:90909:90909)
              pX1    = message from server with image data
              00     = instruction from server (save image to specific node)
              0009   = save the image in Frame 9 buffer (which will be buffer #10 of course)
              023    = node that needs to process this is nodeID = 23
              
      Note - an important use case of the matrix is to smoothly scroll images - this will be enabled for horizontal and (dreamware alert) vertical
      scrolling (and maybe a combo in future iterations).
      To support this we will enable the server to send an image to a wholoe ROW (or COL) of nodes at the same time...

Nodes will insert the image into their buffers in line with THEIR location in the matrix... which is set in (0) above.

       e.g.   pX1_20_0001_02_!90909:90909:90909:90909:90909
              pX1    = message from server with image data
              20     = all nodes in the relevant ROW should save this image to one of their buffers
              0001   = default / base Frame buffer - each node adjusts where they save image based on this and their location in the row.
              02     = We are talking to row1 (the second row).


LIST OF SERVER INSTRUCTIONS:
Server instructions are broadcast to either single nodes, rows, cols or the whole matrix.
We use integers to group ones that are similarly tagetted.  
... this allows us to extract the first int from the message and infer some useful info.
The values below are hardcoded into nodes:

ID    DESCRIPTION
0x    used for instructions aimed at SINGLE NODES:
      - the param that follows is the FRAME ID - rem, nodeID is passed in separately (and ignored in many cases)
00    Save the image to the buffer shown in the InstructionParams field (it will be safe to caste to int)

2x    used for instructions aimed at WHOLE ROWS:
20    Save the image to the buffer in the InstructionParams field OFFSET BY COL LOCATION
21    Scroll left (this row only)
22    Scroll right (this row only)

4x    used for instructions aimed at WHOLE COLUMNS:
... outside scope and unlikely to fit onto node code.  Reserved for now anyway.

60+   used for instructions aimed at WHOLE MATRIX - all nodes:
60    Set your ROW / COL params
61    Clear all*

62    Scroll left (ALL rows)
63    Scroll right (ALL rows)
64    Speed up frame rate by hardcoded incrememt
65    Slow down frame rate by hardcoded increment
66    Set frame speed to param passed in in serverMessage[5:9]
67    Animate to right (i.e. move through node buffers in increments of +1) - ALL rows
67    Animate to left (i.e. move through node buffers in increments of -1) - ALL rows

70    Brighten all pixels*
71    Brighten non-blank pixels*
72    Dim all pixels*
73    Dim all non-blank pixels*

80    Pause
81    Unpause
82    Pause at a specified frame*
83    Show a specific frame from your buffer*
90    Do a check sum and report status*

EXAMPLES OF FULLY FORMED SERVER INSTRUCTIONS (and ones that are encoded in node - ones marked *  above are dreamware atm):
... Set dims                        = pX0600205999 (pX0 60 02 05 999)   - dims are 2 rows by 5 cols.
... Scroll left (specific row)      = pX0210001    (pX0 21 0001)        - row 1 (second row) will be set to scroll left
... Scroll right (specific row)     = pX0220001    (pX0 21 0002)        - row 2 (third row) will be set to scroll right
... Scroll Left                     = pX062
... Scroll Right                    = pX063  
... unPause                         = pX081
... Pause                           = pX082
