
Protocols and examples of server data that is sent to nodes:

The server will send 2 types of message (over radio) to a node.
   NB - ALL messages have the same basic pattern:
   [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char]...
   Messages with an image have that data as a suffix.  Rem - length of the message depends on the message type.

TYPE0:   Server instructions.  
         Inckudes instructions that nodes use to configure operational values, such as their row / col, or default interframe delay

         FORMAT: [serverID, 2char][messageType, 2 char][InstructionParams, 4char][TargetID, 3char] 

       e.g.    pX0_60_0305_999  (rem - we don't send underscores, so this is sent as pX0600104999
               pX0 = message from server with an instruction (so will NOT have image data)
               60 = This message is telling all nodes to set their ROW and COL params 
               03 = There are 3 rows (this is a count so absolute)
               05 = There are 5 columns

TYPE1:   Image data.  
          The core of this app is the server passing image data to the nodes.
         
         FORMAT: [serverID, 2char][serverInstruction, 2 char][InstructionParams, 4char][TargetID, 3char][image data] - 

       e.g.   pX1_00_0009_023_90909:90909:90909:90909:90909  (pX100000902390909:90909:90909:90909:90909)
              pX1    = message from server with image data
              00     = instruction from server (save image to specific node)
              0009   = save the image in Frame 9 buffer (which will be buffer #10 of course)
              023    = node that needs to process this is nodeID = 23
              
      Note - an important use case of the matrix is to smoothly scroll images - this will be enabled for horizontal and vertical
      scrolling (and maybe a combo in future iterations).
      To support this we will enable the server to send an image to a wholoe ROW (or COL) of nodes at the same time...
      Nodes will insert the image into their buffers in line with THEIR location in the matrix... which is set in (0) above.

       e.g.   pX1_20_0001_02_!90909:90909:90909:90909:90909
              pX1    = message from server with image data for an entire row
              20     = all nodes in the relevant ROW should save this image to one of their buffers
              0001   = default / base Frame buffer - each node adjusts where they save image based on this and their location in the row.
              02     = We are talking to row1 (the second row).

MAP (where serverMessage as a message string containing image data):
   serverMessage[0:2]   = ServerID
   serverMessage[2:3]   = messageType (instruction or image)
   serverMessage[3:5]   = server instruction code.
   serverMessage[5:9]   = parameter relating to server instruction (4 chars, can be 2 2-char params, eg Row / Col)
   serverMessage[9:12]  = target (usually a nodeID, but not always - can be frame buffer ID too)
   serverMessage[12:41] = image data

LIST OF SERVER INSTRUCTIONS:
Server instructions are broadcast to either single nodes, rows, cols or the whole matrix.
There aren't many, so we'll use integers to group ones that are similarly tagetted.  This will allow us to extract the first int
from the message string and infer some useful info.
The values below are hardcoded into nodes:

ID    DESCRIPTION
0x    used for instructions aimed at SINGLE NODES:
      - the param that follows is the FRAME ID - rem, nodeID is passed in separately (and ignored in many cases)
00    Save the image to the buffer shown in the InstructionParams field (it will be safe to caste to int)

2x    used for instructions aimed at WHOLE ROWS:
20    Save the image to the buffer in the InstructionParams field OFFSET BY COL LOCATION
      - rem, each node knows its location. By offsetting we can achieve smooth animations.

4x    used for instructions aimed at WHOLE COLUMNS:
40    Save the image to the buffer in the InstructionParams field OFFSET BY ROW LOCATION

60+   used for instructions aimed at WHOLE MATRIX - all nodes:
60    Set your ROW / COL params
61    Clear all

62    Scroll left (ALL rows)
63    Scroll right (ALL rows)
64    Speed up frame rate
65    Slow down frame rate

70    Brighten all pixels
71    Brighten non-blank pixels
72    Dim all pixels
73    Dim all non-blank pixels

80    Pause
81    Unpause

82    Pause at a specified frame
83    Show a specific frame from your buffer
90    Do a check sum and report status


01* This instruction is used when the server wants to send the same image to all nodes on the same row (or col)
Each node then has the same set of images in their buffers, but in different locations
Transition effects between images can then be done without server interference.
01 is basically a much more efficient way than 00 of serving the same images to nodes in the same row.


[InstructionParams = 0001] = tells node where to store the image data for later play-back.



Each node will build up a number of buffers, which will allow for smooth rendering (albeit with long load times).
